@page "/painel-sample"
@using System.Threading

@inherits PainelPage


@{
    var time = State.Value.ServerTime;
    units = State.Value.AvailableUnits.ToList();
    patients = State.Value.PatientsWaitingList.ToList(); ;
    var error = State.Error;
}
<MudGrid>
    <MudItem xs="12" sm="4">
        <MudText Typo="Typo.h5" Class="pb-3">Server Time</MudText>

        <StatefulComponentState State="@State" />
        <WhenException Title="Update error:" Exception="@error" />




        <MudText Class="my-3">
            Server Time: @time
            <br />Refreshes every 5 seconds.
        </MudText>

        <MudButton Color="Color.Primary" Variant="Variant.Filled" IconClass="@Icons.Material.Outlined.Refresh"
                   OnClick="@Refresh">Refresh All State</MudButton>
    </MudItem>
    <MudItem xs="12" sm="4">
        <MudText Typo="Typo.h5" Class="pb-3">Control Panel</MudText>
        <MudText Typo="Typo.body1">Click to add fake Patient to Waiting list</MudText>

        <MudButton Color="Color.Primary"
                   Style="width:100%"
                   Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Add"
                   OnClick="@AddToWaitingList">Add Patient to Waiting List</MudButton>
        <MudButton Color="Color.Error" Variant="Variant.Filled"
                   Style="width:100%"
                   Class="mt-1"
                   StartIcon="@Icons.Material.Outlined.Remove"
                   OnClick="@ClearWaitingList"> Clear Waiting List</MudButton>

        <MudButton Color="Color.Error" Variant="Variant.Filled"
                   Style="width:100%"
                   Class="mt-1"
                   StartIcon="@Icons.Material.Outlined.Remove"
                   OnClick="@EmptyHospitalBeds"> Empty Hospital Beds</MudButton>
    </MudItem>
    <MudItem xs="12" sm="4">
        <MudText Typo="Typo.h5" Class="pb-3">Data</MudText>

        <div class="mb-1">
            <MudBadge Content="@(patients?.Count)" Color="Color.Primary" Overlap="true">
                <MudText Typo="Typo.body1">
                    Patients wainting
                </MudText>
            </MudBadge>
        </div>
        <div class="mb-1">
            <MudBadge Content="@(units?.SelectMany(c => c.HospitalBeds).Where(h => h.IsFree).Count())" Color="Color.Primary" Overlap="true">
                <MudText Typo="Typo.body1" Class="mb-1">
                    Total Free Hospital Beds
                </MudText>
            </MudBadge>
        </div>


    </MudItem>
</MudGrid>


<MudGrid Spacing="4" Style="margin-top: 10px;">
    <MudItem xs="12" sm="3">

        @if (patients?.Count() > 0)
        {
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">
                            Patient waiting list (@patients.Count())
                        </MudText>

                    
                    </CardHeaderContent>
                    <CardHeaderActions>

                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudSelect T="OrderByPatientOption" @bind-Value="@SelectedOrderBy" Label="Order By" Style="width: 50%;">
                        <MudSelectItem Value="OrderByPatientOption.AgeDescending">
                            <div class="d-flex justify-space-between">

                                <MudText Typo="Typo.body1">Age</MudText>
                                <MudIcon Icon="fas fa-sort-numeric-down-alt" Size="Size.Small"></MudIcon>
                            </div>
                        </MudSelectItem>
                        <MudSelectItem Value="OrderByPatientOption.AgeAscending">
                            <div class="d-flex justify-space-between">
                                <MudText Typo="Typo.body1">Age Ascending</MudText> <MudIcon Icon="fas fa-sort-numeric-down"></MudIcon>

                            </div>
                        </MudSelectItem>

                        <MudSelectItem Value="OrderByPatientOption.ArrivalDescending">
                            <div class="d-flex justify-space-between">

                                <MudText Typo="Typo.body1">Arrival Descending</MudText><MudIcon Icon="fas fa-sort-numeric-down-alt"></MudIcon>
                            </div>
                        </MudSelectItem>
                        <MudSelectItem Value="OrderByPatientOption.ArrivalAscending">
                            <div class="d-flex justify-space-between">
                                <MudText Typo="Typo.body1">Arrival Ascending</MudText>
                                <MudIcon Icon="fas fa-sort-numeric-down"></MudIcon>
                            </div>
                        </MudSelectItem>
                    </MudSelect>
                </MudCardContent>

            </MudCard>
            <div style="overflow-y: scroll; max-height: 450px; margin-top: 8px">

                <Virtualize Context="p" Items="@OrderedPatientList" OverscanCount="5">
                    <div ondragover="event.preventDefault();"
                         ondragstart="event.dataTransfer.setData('', event.target.id);">
                        <MudCard draggable="true"
                                 Class="@(p.PatientId == DragPatient?.PatientId ? draggingCss : "")"
                                 @ondragstart="@(() => HandleDragStart(p))" @ondragend="@HandleDragEnd">

                            <MudCardHeader>
                                <CardHeaderAvatar>
                                    <MudAvatar Color="Color.Primary">@p.Name.Substring(0, 1).ToUpperInvariant()</MudAvatar>
                                </CardHeaderAvatar>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.body1">@($"{p.Name} , ")<GenderDisplay Gender="p.Gender" /></MudText>
                                    <MudText Typo="Typo.caption">Age: @(p.Age.ToAgeString())</MudText>
                                    <MudText Typo="Typo.caption">Waiting for @(p.TimeInLine.ToTimeInLineString())</MudText>

                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudIconButton Icon="@Icons.Material.Outlined.Settings" Color="Color.Default" OnClick="@(() => PutPatient(p))" />
                                </CardHeaderActions>
                            </MudCardHeader>



                        </MudCard>
                    </div>
                    <div style="margin-top:12px" />
                </Virtualize>
            </div>



        }
        else
        {
            <MudAlert Severity="Severity.Success">
                No Patients on waiting list!
            </MudAlert>
        }

    </MudItem>



    <MudItem xs="12" sm="3">
        @if (units.Count() > 0)
        {
            <MudText Typo="Typo.body2">
                Order by Number of free beds descending.
            </MudText>
            @foreach (var u in units)
            {


                <MudCard Class="@(SelectedCareUnit?.CareUnitId == u.CareUnitId ? "selected-card" : "not-selected-card")">
                    <MudCardHeader>
                        <CardHeaderAvatar>
                            <MudAvatar Color="@(u.FreeBeds == 0 ? Color.Error : Color.Success)">
                                <MudIcon Icon="fas fa-hospital-alt"></MudIcon>
                            </MudAvatar>
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h5">@u.Name</MudText>
                        </CardHeaderContent>

                    </MudCardHeader>
                    <MudCardContent>
                        <MudProgressLinear  Value="@((u.FreeBeds/ u.Capacity) * 100)"/>
                        <MudText Typo="Typo.body2">Free Beds: @u.FreeBeds.</MudText>
                        <MudText Typo="Typo.body2">Total Capacity: @u.Capacity.</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Outlined" Color="@(SelectedCareUnit?.CareUnitId == u.CareUnitId ? Color.Warning: Color.Primary)" @onclick="@(() => SelectUnit(u))">
                            @if (SelectedCareUnit?.CareUnitId == u.CareUnitId)
                            {
                                @("Unselect")
                            }
                            else
                            {
                                @("select")
                            }
                        </MudButton>
                    </MudCardActions>
                </MudCard>
                <div style="margin-top: 12px"></div>
            }
        }
        else
        {

            <MudAlert Severity="Severity.Warning" Elevation="2">
                No units available
            </MudAlert>
        }

    </MudItem>

    <MudItem xs="12" sm="6">
        @if (SelectedCareUnit == null)
        {
            <MudAlert Severity="Severity.Warning" Elevation="2">
                No unit selected
            </MudAlert>
        }
        else
        {

            <SelectedUnitDisplay CareUnit="SelectedCareUnit" OnDroppedBed="HandleDrop" OnDischargeClicked="DischargePatient" />

        }
    </MudItem>
    <MudItem xs="6">
      @*  <RequestLoggingDisplay />*@
    </MudItem>
</MudGrid>

