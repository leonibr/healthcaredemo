@inherits ComputedStateComponent<Domain.AppNotification>
@inject ISnackbar Snackbar
@inject INotificationService NotificationService


@code {
    protected Domain.AppNotification CurrentNotificaion { get; set; } = new Domain.AppNotification();


    protected override void OnInitialized()
    {
        StateHasChangedTriggers = StateEventKind.All;
        base.OnInitialized();
    }

    protected override ComputedState<Domain.AppNotification>.Options GetStateOptions()
        => new()
            {
                InitialValue = new(),
                UpdateDelayer = FixedDelayer.Get(0.5),
            };


    protected override async Task<Domain.AppNotification> ComputeState(System.Threading.CancellationToken cancellationToken)
    {
        var notification = await NotificationService.GetNotification(cancellationToken);
        if (CurrentNotificaion != null && notification != null)
        {

            if (notification.AppNotificationId != CurrentNotificaion.AppNotificationId)
            {
                CurrentNotificaion = notification;
                if (CurrentNotificaion.Messages.Count() > 0)
                {
                    foreach (var msg in CurrentNotificaion.Messages)
                    {
                        Snackbar.Add(msg, Severity.Normal, (c) => { c.ShowCloseIcon = true; });
                    }
                }
            }
        }
        return notification;
    }




}
