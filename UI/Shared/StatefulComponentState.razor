@using Stl.Async
@implements IDisposable

<div class="flex flex-column">
    <MudText Inline="true">Component state: </MudText>
    @if (IsLoading)
            {
        <MudChip Color="Color.Primary" Icon="@Icons.Material.Outlined.Check">Loading...</MudChip>

            }
    else if (IsUpdating){
        <MudChip  Color="Color.Warning"  Icon="@Icons.Material.Outlined.Check">Updating...</MudChip>

            }
                else if (IsUpdatePending) { 
        <MudChip  Color="Color.Default" Icon="@Icons.Material.Outlined.Check">Updating pending...</MudChip>
    
    }
    else  {
        <MudChip  Color="Color.Success"  Icon="@Icons.Material.Outlined.Check">In sync</MudChip>
    }
</div>

@code {
    private readonly Action<IState, StateEventKind> _stateChangedHandler;
    private IState _state = null!;

    [Parameter]
    public IState State
    {
        get => _state;
        set
        {
            if (_state == value)
                return;
            _state?.RemoveEventHandler(StateEventKind.All, _stateChangedHandler);
            _state = value;
            _state?.AddEventHandler(StateEventKind.All, _stateChangedHandler);
        }
    }

    public bool IsLoading => State == null! || State.Snapshot.UpdateCount == 0;
    public bool IsUpdating => State == null! || State.Snapshot.WhenUpdating().IsCompleted;
    public bool IsUpdatePending => State == null! || State.Snapshot.Computed.IsInvalidated();

    public StatefulComponentState()
        => _stateChangedHandler = async (_, _) => await this.StateHasChangedAsync();

    public virtual void Dispose()
        => State = null!;
}
